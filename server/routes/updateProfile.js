const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const User = require('../models/user'); // —Ç–≤–æ—è –º–æ–¥–µ–ª—å

// üõ°Ô∏è Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function authenticate(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ message: "‚õî –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });

  const token = authHeader.split(" ")[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(401).json({ message: "‚õî –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω" });
  }
}

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
router.put('/', authenticate, async (req, res) => {
  const { email, region } = req.body;
  try {
    const user = await User.findByIdAndUpdate(
      req.user.userId,
      { email, region },
      { new: true }
    );
    res.json({
      message: "‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ",
      email: user.email,
      region: user.region
    });
  } catch (err) {
    res.status(500).json({ message: "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é", error: err.message });
  }
});

module.exports = router;
