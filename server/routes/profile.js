const express = require("express");
const router = express.Router();
const User = require("../models/user");
const auth = require("../middleware/auth");

router.get("/", auth, async (req, res) => {
  try {
    console.log("üîê –î–∞–Ω—ñ –∑ —Ç–æ–∫–µ–Ω–∞:", req.user);
const user = await User.findById(req.user.id).select("email region address role");

    if (!user) return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(user);
  } catch (err) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// PUT /api/profile/update
router.put("/update", auth, async (req, res) => {
  try {
    const { email, region } = req.body;
    const userId = req.user.id;

    if (!email || !region) {
      return res.status(400).json({ message: "Email —ñ –†–µ–≥—ñ–æ–Ω –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { email, region },
      { new: true }
    ).select("email region");

    res.json({
      message: "–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
      email: updatedUser.email,
      region: updatedUser.region,
    });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;

// PUT /api/profile/update
router.put("/update", auth, async (req, res) => {
  try {
    const { email, region } = req.body;
    const userId = req.user.id;

    if (!email || !region) {
      return res.status(400).json({ message: "Email —ñ –†–µ–≥—ñ–æ–Ω –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
    }

    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { email, region },
      { new: true }
    ).select("email region");

    res.json({
      message: "–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
      email: updatedUser.email,
      region: updatedUser.region,
    });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
